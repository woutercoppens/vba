Option Explicit

Public Sub InitialiseMasterInputHeaders(wsName As Worksheet)
    '/===========================================================================================================
    '/ This function fills an array with all the headers of the assets worksheet and their columnnumbers
    '/===========================================================================================================
    '/ The first element in the array is 'Task Target', so we know it's the first column
    '/ The second column in the array is 'CLIN Structure', so we know it's the second column
    '/ And so on
    '/ NEVER REORDER THE ARRAY !!!!
    '/
    Dim rngMasterInputHeaders   As Range
    Dim rngCol                  As Range
    Dim i                       As Integer: i = 1
    
    On Error GoTo ErrorHandler
    'MsgBox ("Initialising Master Input headers")
    Set rngMasterInputHeaders = GetHeadersOfRange(wsName.Range("A1:Z1").Rows)
    
    '/ Read the value of each header (column) and put it in the array
    ReDim vArrayMIHeaders(1 To rngMasterInputHeaders.Columns.Count)
    For Each rngCol In rngMasterInputHeaders.Columns
        vArrayMIHeaders(i) = rngCol.Cells(1, 1).Value
        i = i + 1
    Next rngCol
        
    '/ Do some basic checking
    If Not IsInArray(vArrayMIHeaders, "Task Target") Then GoTo ErrorHandler
    If Not IsInArray(vArrayMIHeaders, "Location") Then GoTo ErrorHandler
    If Not IsInArray(vArrayMIHeaders, "T-Shirt Model") Then GoTo ErrorHandler
    If Not IsInArray(vArrayMIHeaders, "ProjectUID") Then GoTo ErrorHandler

ErrorExit:
    On Error Resume Next
    Exit Sub

ErrorHandler:
    'to be written
      Resume ErrorExit
End Sub

Function NumberOfDimensions(ByVal vArray As Variant) As Long
    '/===========================================================================================================
    '/ This function the dimensions of an array
    '/===========================================================================================================
    '/ Found at http://stackoverflow.com/questions/6901991/how-to-return-the-number-of-dimensions-of-a-variant-variable-passed-to-it-in-v
    '/
    Dim dimnum As Long
    Dim ErrorCheck As Long
    On Error GoTo FinalDimension
    
    For dimnum = 1 To 60000
        ErrorCheck = LBound(vArray, dimnum)
    Next
    
FinalDimension:
        NumberOfDimensions = dimnum - 1
End Function

Public Function GetColHdr(sName As String) As Long
    '/===========================================================================================================
    '/ This function returns the column number with 'sName' header
    '/===========================================================================================================
    ' It should return only 1 value
    Dim vTmpArray   As Variant
    
    On Error GoTo ErrorHandler
    
    'MsgBox ("getcolheader")
    vTmpArray = FilterArray(sName, 0, vArrayMIHeaders)
    If IsEmpty(vTmpArray) Then GoTo ErrorHandler
    If IsError(LBound(vTmpArray)) Then GoTo ErrorHandler
    If LBound(vTmpArray) <> UBound(vTmpArray) Then GoTo ErrorHandler '/ The array should only contain 1 element
    
    GetColHdr = CLng(vTmpArray(LBound(vTmpArray)))
    
ErrorExit:
    On Error Resume Next
    Exit Function

ErrorHandler:
    ' To be written
    Resume ErrorExit
End Function

Public Function IsInArray(arr As Variant, valueToFind As Variant, Optional offset As Long) As Boolean
'/===========================================================================================================
'/ This function checks if valueToFind is found in arr, no loop!
'/===========================================================================================================
' Found at http://www.jpsoftwaretech.com/checking-arrays-exact-matches/
    Dim i As Long
    Const sSOURCE   As String = "IsInArray()"
    On Error GoTo ErrorHandler
    For i = (LBound(arr) + offset) To UBound(arr)
        If StrComp(arr(i), valueToFind) = 0 Then
            IsInArray = True
            Exit For
        End If
    Next i

ErrorExit:
    On Error Resume Next
    Exit Function

ErrorHandler:
 ' to be written
        MsgBox ("error in IsInArray")
        Resume ErrorExit
End Function

Public Function FilterArray(vValueToFind As Variant, lColNum As Long, vArr As Variant, Optional bExactMatch As Boolean = True) As Variant
    '/===========================================================================================================
    '/ This function loops through an array and returns the rows with the value.
    '/===========================================================================================================
    '/ This funtion loops through an array or a range and returns also an array.
    '/ The array that is returned contains only
    '/ the rows that have the value that is searched for.
    '/===========================================================================================================
    Dim j               As Long
    Dim i               As Integer: i = 1
    Dim lDimArr         As Long
    Dim tmpArr()          As Variant
    Dim retArr()        As Variant
    Dim IsArrayAlloc    As Boolean
    
    If IsObject(vArr) = True Then
            '/ OBJECT
            '/ If we have an object, ensure it it a Range. The Range object is the only type of object we'll
            '/ work with. Anything else causes a #VALUE error.
            If TypeOf vArr Is Excel.Range Then
                tmpArr = vArr.Value2
            Else
                '/ Unsupported object type. Return a #VALUE error.
                FilterArray = CVErr(xlErrValue)
                Exit Function
            End If
    
    ElseIf IsArray(vArr) = True Then
            '/ ARRAY:If vArr is an array, ensure it is an allocated array.
            IsArrayAlloc = (Not IsError(LBound(vArr)) And (LBound(vArr) <= UBound(vArr)))
            If IsArrayAlloc = True Then
                '/ The array is allocated.
                tmpArr = vArr
            Else
                '/ Unsupported object type. Return a #VALUE error.
                FilterArray = CVErr(xlErrValue)
                Exit Function
            End If
    End If
   
    '/ Check the dimension of the array
    lDimArr = NumberOfDimensions(vArr)
    If lColNum > lDimArr Then
        ' lcolnum is bigger then array dimension, so something is wrong
        FilterArray = CVErr(xlErrValue)
        Exit Function
    End If
       
    '/ tmpArr is an Array and it is allocated.
    If bExactMatch Then
        If lDimArr = 1 Then
            '/ 1 dimensional array, so ignore lColNum
            For j = LBound(tmpArr) To UBound(tmpArr)
                If tmpArr(j) = vValueToFind Then
                    ReDim Preserve retArr(1 To i)
                    retArr(i) = j
                    i = i + 1
                End If
            Next j
        Else
            For j = LBound(tmpArr) To UBound(tmpArr)
                If tmpArr(j, lColNum) = vValueToFind Then
                    ReDim Preserve retArr(1 To i)
                    retArr(i) = j
                    i = i + 1
                End If
            Next j
        End If
    Else
        If lDimArr = 1 Then
            '/ 1 dimensional array, so ignore lColNum
            For j = LBound(tmpArr) To UBound(tmpArr)
                If tmpArr(j) = vValueToFind Then
                    ReDim Preserve retArr(1 To i)
                    retArr(i) = j
                    i = i + 1
                End If
            Next j
        Else
            For j = LBound(tmpArr) To UBound(tmpArr)
                If Not IsError(Application.Match(vValueToFind, tmpArr(j, lColNum), 0)) Then
                    ReDim Preserve retArr(1 To i)
                    retArr(i) = j
                    i = i + 1
                End If
            Next j
        End If
    End If
    LogInformation (GetMessageText(retArr))
    FilterArray = retArr
End Function

Public Function to1DArray(MyCollection As Collection) As Variant
    '/===========================================================================================================
    '/ This function loops through an array and returns the rows with the value.
    '/===========================================================================================================
  If MyCollection Is Nothing Then
    Debug.Print Chr(10) & Time & ": Collection Is Empty"
    Exit Function
  End If

  Dim myarr() As Variant
  Dim i As Integer
  ReDim myarr(0, 0 To MyCollection.Count - 1) As Variant

  For i = 1 To MyCollection.Count
      myarr(0, i - 1) = MyCollection(i)
  Next i

  to1DArray = myarr
End Function

Function StringConcat(Sep As String, ParamArray Args()) As Variant
    '/===========================================================================================================
    '/ This function concatenates all elements in the array into a single string
    '/===========================================================================================================
    '/ By Chip Pearson, chip@cpearson.com, www.cpearson.com
    '/                  www.cpearson.com/Excel/stringconcatenation.aspx
    '/ This function concatenates all the elements in the Args array, delimited by the Sep character,
    '/ into a single string. This function can be used in an array formula. There is a VBA imposed limit that
    '/ a string in a passed in array (e.g., calling this function from an array formula in a
    '/ worksheet cell) must be less than 256 characters. See the comments at STRING TOO LONG HANDLING for details.
    '/===========================================================================================================
    Dim S               As String
    Dim N               As Long
    Dim M               As Long
    Dim R               As Range
    Dim NumDims         As Long
    Dim LB              As Long
    Dim IsArrayAlloc    As Boolean
        
    '/ If no parameters were passed in, return vbNullString.
    If UBound(Args) - LBound(Args) + 1 = 0 Then
        StringConcat = vbNullString
        Exit Function
    End If
    
    '/ Loop through the Args
    For N = LBound(Args) To UBound(Args)
        If IsObject(Args(N)) = True Then
            '/ OBJECT
            '/ If we have an object, ensure it it a Range. The Range object is the only type of object we'll
            '/ work with. Anything else causes a #VALUE error.
            If TypeOf Args(N) Is Excel.Range Then
                '/ If it is a Range, loop through the cells and create append the elements to the string S.
                For Each R In Args(N).Cells
                    If Len(R.Text) > 0 Then
                        S = S & R.Text & Sep
                    End If
                Next R
            Else
                '/ Unsupported object type. Return a #VALUE error.
                StringConcat = CVErr(xlErrValue)
                Exit Function
            End If
    
        ElseIf IsArray(Args(N)) = True Then
            '/ ARRAY:If Args(N) is an array, ensure it is an allocated array.
            IsArrayAlloc = (Not IsError(LBound(Args(N))) And (LBound(Args(N)) <= UBound(Args(N))))
            If IsArrayAlloc = True Then
                '/ The array is allocated. Determine the number of dimensions of the array.
                NumDims = 1
                On Error Resume Next
                Err.Clear
                NumDims = 1
                Do Until Err.Number <> 0
                    LB = LBound(Args(N), NumDims)
                    If Err.Number = 0 Then
                        NumDims = NumDims + 1
                    Else
                        NumDims = NumDims - 1
                    End If
                Loop
                On Error GoTo 0
                Err.Clear
                ' The array must have either one or two dimensions. Greater that two caues a #VALUE error.
                If NumDims > 2 Then
                    StringConcat = CVErr(xlErrValue)
                    Exit Function
                End If
                If NumDims = 1 Then
                    For M = LBound(Args(N)) To UBound(Args(N))
                        If Args(N)(M) <> vbNullString Then
                            S = S & Args(N)(M) & Sep
                        End If
                    Next M
    
                Else
                    '/ STRING TOO LONG HANDLING
                    '/ Here, the error handler must be set to either
                    '/   On Error GoTo ContinueLoop
                    '/   or
                    '/   On Error GoTo ErrH
                    '/ If you use ErrH, then any error, including a string too long error, will cause the function to return #VALUE and quit. If you use ContinueLoop,
                    '/ the problematic value is ignored and not included in the result, and the result is the concatenation of all non-error values in the input. This code is
                    '/ used in the case that an input string is longer than 255 characters.
                    On Error GoTo ContinueLoop
                    '/ On Error GoTo ErrH
                    Err.Clear
                    For M = LBound(Args(N), 1) To UBound(Args(N), 1)
                        If Args(N)(M, 1) <> vbNullString Then
                            S = S & Args(N)(M, 1) & Sep
                        End If
                    Next M
                    Err.Clear
                    M = LBound(Args(N), 2)
                    If Err.Number = 0 Then
                        For M = LBound(Args(N), 2) To UBound(Args(N), 2)
                            If Args(N)(M, 2) <> vbNullString Then
                                S = S & Args(N)(M, 2) & Sep
                            End If
                        Next M
                    End If
                    On Error GoTo ErrH:
                End If
            Else
                If Args(N) <> vbNullString Then
                    S = S & Args(N) & Sep
                End If
            End If
            Else
            On Error Resume Next
            If Args(N) <> vbNullString Then
                S = S & Args(N) & Sep
            End If
            On Error GoTo 0
        End If
ContinueLoop:
    Next N
        
        '/ Remove the trailing Sep
        If Len(Sep) > 0 Then
            If Len(S) > 0 Then
                S = Left(S, Len(S) - Len(Sep))
            End If
        End If
        
        StringConcat = S
        Exit Function         '/ Success. Get out.
ErrH:
        StringConcat = CVErr(xlErrValue)    '/ Error. Return #VALUE
End Function

